!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=clang++$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS=-std=c++11 -pthread -DDEBUG -O0 -g$/;"	m
ERROR_INVALID_SOCKET	stcp_errno.h	6;"	d
ERROR_IO_PENDING	stcp_errno.h	8;"	d
ERROR_NOT_SUPPORT	stcp_errno.h	10;"	d
ERROR_OUTOF_INDEX	stcp_errno.h	5;"	d
ERROR_SUCCESS	stcp_errno.h	3;"	d
ERROR_UNEXPETED_PARA	stcp_errno.h	4;"	d
MAXSIZE_SOCKET	queue_socket.h	18;"	d
PSOCKET_QUEUE	queue_socket.h	/^}SOCKET_QUEUE, *PSOCKET_QUEUE;$/;"	t	typeref:struct:_s_queue_socket
QUEUE_PACKET_H	queue_packet.h	10;"	d
SOCKET_QUEUE	queue_socket.h	/^}SOCKET_QUEUE, *PSOCKET_QUEUE;$/;"	t	typeref:struct:_s_queue_socket
SPKT	stcp.h	/^}SPKT;$/;"	t	typeref:struct:stcp_pkt
SPKTDATA	stcp.h	/^}SPKTDATA;$/;"	t	typeref:struct:stcp_pkt_data
SPKTEXT	stcp.h	/^}SPKTEXT;$/;"	t	typeref:struct:stcp_pkt_ext
SPKTHDR	stcp.h	/^}SPKTHDR;$/;"	t	typeref:struct:stcp_packet_header
STCP_CACHE_MASK	stcp_cache.h	9;"	d
STCP_CACHE_MAXSIZE	stcp_cache.h	8;"	d
STCP_PKT_DATA_SIZE	stcp.h	41;"	d
STCP_SOCKET_ACCEPT	stcp.h	/^	STCP_SOCKET_ACCEPT,$/;"	e	enum:stcp_class_enum
STCP_SOCKET_CONNECT	stcp.h	/^	STCP_SOCKET_CONNECT,$/;"	e	enum:stcp_class_enum
STCP_SOCKET_LISTEN	stcp.h	/^	STCP_SOCKET_LISTEN,$/;"	e	enum:stcp_class_enum
STCP_STATUS_BINDED	stcp.h	/^    STCP_STATUS_BINDED,$/;"	e	enum:stcp_socket_status
STCP_STATUS_CLOSED	stcp.h	/^    STCP_STATUS_CLOSED$/;"	e	enum:stcp_socket_status
STCP_STATUS_CONNECTED	stcp.h	/^    STCP_STATUS_CONNECTED,$/;"	e	enum:stcp_socket_status
STCP_STATUS_CONNECTING	stcp.h	/^    STCP_STATUS_CONNECTING,$/;"	e	enum:stcp_socket_status
STCP_STATUS_CREATED	stcp.h	/^    STCP_STATUS_CREATED,$/;"	e	enum:stcp_socket_status
STCP_STATUS_LISTENED	stcp.h	/^    STCP_STATUS_LISTENED,$/;"	e	enum:stcp_socket_status
STCP_STATUS_NULL	stcp.h	/^    STCP_STATUS_NULL,$/;"	e	enum:stcp_socket_status
STCP_STATUS_RESET	stcp.h	/^    STCP_STATUS_RESET,$/;"	e	enum:stcp_socket_status
_STCP_STARTUP__	stcp_startup.h	2;"	d
__QUEUE_SOCKET_H	queue_socket.h	8;"	d
__STCP_API	stcp_api.h	2;"	d
__STCP_CACHE_H	stcp_cache.h	6;"	d
__STCP_ERROR_H	stcp_errno.h	2;"	d
__STCP_H	stcp.h	2;"	d
__STCP_LOG_H	stcp_log.h	2;"	d
__STCP_SOCKET_ACCEPT	stcp_socket_accept.h	2;"	d
__STCP_SOCKET_CONNECT_H	stcp_socket_connect.h	2;"	d
__STCP_SOCKET_H	stcp_socket_base.h	2;"	d
__STCP_SOCKET_LISTEN	stcp_socket_listen.h	2;"	d
__STCP_SOCKET_TCP_H	stcp_socket_tcp.h	2;"	d
_s_queue_socket	queue_socket.h	/^typedef struct _s_queue_socket$/;"	s
_s_queue_socket::ss	queue_socket.h	/^	stcp_socket_base *ss;$/;"	m	struct:_s_queue_socket	access:public
_s_queue_socket::status	queue_socket.h	/^	stcp_socket_status status;$/;"	m	struct:_s_queue_socket	access:public
accept	stcp_socket_base.cpp	/^int stcp_socket_base::accept(struct sockaddr * addr,int addrlen)$/;"	f	class:stcp_socket_base	signature:(struct sockaddr * addr,int addrlen)
accept	stcp_socket_base.h	/^		virtual int accept(struct sockaddr * addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(struct sockaddr * addr, int addrlen)
accept	stcp_socket_listen.cpp	/^int stcp_socket_listen::accept(struct sockaddr * addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(struct sockaddr * addr, int addrlen)
ackfreq	stcp.h	/^    short ackfreq;$/;"	m	struct:stcp_pkt_data	access:public
alloc	stcp_cache.cpp	/^SPKTEXT * stcp_cache::alloc(int serial)$/;"	f	class:stcp_cache	signature:(int serial)
alloc	stcp_cache.h	/^       SPKTEXT *alloc(int serial);$/;"	p	class:stcp_cache	access:public	signature:(int serial)
alloc_queue	queue_packet.h	/^		unsigned char* alloc_queue(int sn, int count);$/;"	p	class:queue_packet	access:public	signature:(int sn, int count)
bind	stcp_socket_base.cpp	/^int stcp_socket_bas::bind(const struct sockaddr * addr,int addrlen)$/;"	f	class:stcp_socket_bas	signature:(const struct sockaddr * addr,int addrlen)
bind	stcp_socket_base.h	/^		virtual int bind(const struct sockaddr * addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(const struct sockaddr * addr, int addrlen)
bind	stcp_socket_listen.cpp	/^int stcp_socket_listen::bind(const struct sockaddr * addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(const struct sockaddr * addr, int addrlen)
body	stcp.h	/^    }body;$/;"	m	struct:stcp_pkt	typeref:union:stcp_pkt::__anon1	access:public
cache_pool	stcp_cache.h	/^       SPKTEXT cache_pool[STCP_CACHE_MAXSIZE];$/;"	m	class:stcp_cache	access:private
cache_size	stcp_cache.h	/^       int cache_size;$/;"	m	class:stcp_cache	access:private
close_socket	stcp_socket_base.cpp	/^int stcp_socket_base::close_socket()$/;"	f	class:stcp_socket_base	signature:()
close_socket	stcp_socket_base.h	/^		int close_socket();$/;"	p	class:stcp_socket_base	access:public	signature:()
close_socket_force	stcp_socket_base.cpp	/^int stcp_socket_base::close_socket_force()$/;"	f	class:stcp_socket_base	signature:()
close_socket_force	stcp_socket_base.h	/^		int close_socket_force();$/;"	p	class:stcp_socket_base	access:public	signature:()
connect	stcp_socket_base.cpp	/^int stcp_socket_base::connect(struct sockaddr *addr,int addrlen)$/;"	f	class:stcp_socket_base	signature:(struct sockaddr *addr,int addrlen)
connect	stcp_socket_base.h	/^		virtual int connect(struct sockaddr *addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(struct sockaddr *addr, int addrlen)
connect	stcp_socket_listen.cpp	/^int stcp_socket_listen::connect(struct sockaddr *addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(struct sockaddr *addr, int addrlen)
data	stcp.h	/^        SPKTDATA data;$/;"	m	union:stcp_pkt::__anon1	access:public
data	stcp.h	/^    char data[STCP_PKT_DATA_SIZE];$/;"	m	struct:stcp_pkt_data	access:public
data_offset	stcp.h	/^    int data_offset;$/;"	m	struct:stcp_pkt_ext	access:public
data_size	stcp.h	/^    int data_size;$/;"	m	struct:stcp_pkt_ext	access:public
free	stcp_cache.cpp	/^int stcp_cache::free (int serial, int size)$/;"	f	class:stcp_cache	signature:(int serial, int size)
free	stcp_cache.h	/^       int free(int serial, int size);$/;"	p	class:stcp_cache	access:public	signature:(int serial, int size)
free_queue	queue_packet.cpp	/^void queue_packet::free_queue(int sn, int count)$/;"	f	class:queue_packet	signature:(int sn, int count)
free_queue	queue_packet.h	/^		void free_queue(int sn, int count);$/;"	p	class:queue_packet	access:public	signature:(int sn, int count)
get_socket	stcp_startup.cpp	/^stcp_socket_base* stcp_startup::get_socket(int index)$/;"	f	class:stcp_startup	signature:(int index)
get_socket	stcp_startup.h	/^		stcp_socket_base * get_socket(int index);$/;"	p	class:stcp_startup	access:public	signature:(int index)
get_socket_class	stcp_socket_base.cpp	/^int  stcp_socket_base::get_socket_class()$/;"	f	class:stcp_socket_base	signature:()
get_socket_class	stcp_socket_base.h	/^		int  get_socket_class();$/;"	p	class:stcp_socket_base	access:public	signature:()
hdr	stcp.h	/^    SPKTHDR hdr;$/;"	m	struct:stcp_pkt	access:public
listen	stcp_socket_base.cpp	/^int stcp_socket_base::listen(int backlog)$/;"	f	class:stcp_socket_base	signature:(int backlog)
listen	stcp_socket_base.h	/^		virtual int listen(int backlog);$/;"	p	class:stcp_socket_base	access:public	signature:(int backlog)
listen	stcp_socket_listen.cpp	/^int stcp_socket_listen::listen(int backlog)$/;"	f	class:stcp_socket_listen	signature:(int backlog)
m_bind_addr	stcp_socket_listen.h	/^		struct sockaddr m_bind_addr;$/;"	m	class:stcp_socket_listen	typeref:struct:stcp_socket_listen::sockaddr	access:private
m_cache_count	queue_packet.h	/^		unsigned int m_cache_count=0x80;\/\/多少个cache可用$/;"	m	class:queue_packet	access:private
m_cache_size	queue_packet.h	/^		unsigned int m_cache_size=1024;$/;"	m	class:queue_packet	access:private
m_class	stcp_socket_base.h	/^		int m_class;\/\/socket 类型$/;"	m	class:stcp_socket_base	access:private
m_count	queue_socket.h	/^		std::atomic<int> m_count;$/;"	m	class:queue_socket	access:private
m_freed_sn	queue_packet.h	/^		unsigned int m_freed_sn;\/\/已经使用了的sn$/;"	m	class:queue_packet	access:private
m_index	stcp_socket_base.h	/^		int m_index;\/\/socket在pool中的index$/;"	m	class:stcp_socket_base	access:private
m_instance	queue_socket.cpp	/^queue_socket queue_socket::m_instance;$/;"	m	class:queue_socket	file:
m_instance	queue_socket.h	/^		static queue_socket m_instance;$/;"	m	class:queue_socket	access:public
m_instance	stcp_startup.h	/^		static stcp_startup m_instance;$/;"	m	class:stcp_startup	access:public
m_matrix_mask	queue_packet.h	/^		unsigned int m_matrix_mask=0x80;$/;"	m	class:queue_packet	access:private
m_mutex	queue_socket.h	/^		std::mutex m_mutex;$/;"	m	class:queue_socket	access:private
m_mutex	stcp_startup.h	/^		static std::mutex m_mutex;$/;"	m	class:stcp_startup	access:private
m_psocket_queue	queue_socket.h	/^		SOCKET_QUEUE *m_psocket_queue;$/;"	m	class:queue_socket	access:private
m_queue_matrix	queue_packet.h	/^		SPKTEXT *m_queue_matrix;$/;"	m	class:queue_packet	access:private
m_socket	stcp_socket_base.h	/^		int m_socket;\/\/udp的socket$/;"	m	class:stcp_socket_base	access:protected
m_socket_queue	stcp_startup.h	/^		queue_socket m_socket_queue;$/;"	m	class:stcp_startup	access:private
m_use_count	queue_packet.h	/^		unsigned int m_use_count;\/\/目前使用中的数量$/;"	m	class:queue_packet	access:private
main	main.cpp	/^int main(void)$/;"	f	signature:(void)
make_socket	stcp_startup.cpp	/^int stcp_startup::make_socket(stcp_class_enum cls)$/;"	f	class:stcp_startup	signature:(stcp_class_enum cls)
make_socket	stcp_startup.h	/^		int make_socket(stcp_class_enum cls);$/;"	p	class:stcp_startup	access:public	signature:(stcp_class_enum cls)
override	stcp_socket_listen.h	/^		int bind(const struct sockaddr * addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
override	stcp_socket_listen.h	/^		int listen(int backlog) override;$/;"	m	class:stcp_socket_listen	access:public
override	stcp_socket_listen.h	/^	    int recv(void *buf, int size, int flag) override;$/;"	m	class:stcp_socket_listen	access:public
override	stcp_socket_listen.h	/^	    int send(const void * buf, int size, int flag) override;$/;"	m	class:stcp_socket_listen	access:public
override	stcp_socket_listen.h	/^        int accept(struct sockaddr * addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
override	stcp_socket_listen.h	/^        int connect(struct sockaddr *addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
pkt	stcp.h	/^    SPKT pkt;$/;"	m	struct:stcp_pkt_ext	access:public
pkt_size	stcp.h	/^    int pkt_size;$/;"	m	struct:stcp_pkt_ext	access:public
queue_alloc	queue_packet.cpp	/^SPKTEXT * queue_packet::queue_alloc(unsigned int sn)$/;"	f	class:queue_packet	signature:(unsigned int sn)
queue_alloc	queue_packet.h	/^		SPKTEXT * queue_alloc(unsigned int sn);$/;"	p	class:queue_packet	access:public	signature:(unsigned int sn)
queue_get	queue_packet.h	/^		SPKTEXT * queue_get(unsigned int sn);$/;"	p	class:queue_packet	access:public	signature:(unsigned int sn)
queue_packet	queue_packet.cpp	/^queue_packet::queue_packet()$/;"	f	class:queue_packet	signature:()
queue_packet	queue_packet.h	/^		queue_packet();$/;"	p	class:queue_packet	access:public	signature:()
queue_packet	queue_packet.h	/^class queue_packet{$/;"	c
queue_packet::alloc_queue	queue_packet.h	/^		unsigned char* alloc_queue(int sn, int count);$/;"	p	class:queue_packet	access:public	signature:(int sn, int count)
queue_packet::free_queue	queue_packet.cpp	/^void queue_packet::free_queue(int sn, int count)$/;"	f	class:queue_packet	signature:(int sn, int count)
queue_packet::free_queue	queue_packet.h	/^		void free_queue(int sn, int count);$/;"	p	class:queue_packet	access:public	signature:(int sn, int count)
queue_packet::m_cache_count	queue_packet.h	/^		unsigned int m_cache_count=0x80;\/\/多少个cache可用$/;"	m	class:queue_packet	access:private
queue_packet::m_cache_size	queue_packet.h	/^		unsigned int m_cache_size=1024;$/;"	m	class:queue_packet	access:private
queue_packet::m_freed_sn	queue_packet.h	/^		unsigned int m_freed_sn;\/\/已经使用了的sn$/;"	m	class:queue_packet	access:private
queue_packet::m_matrix_mask	queue_packet.h	/^		unsigned int m_matrix_mask=0x80;$/;"	m	class:queue_packet	access:private
queue_packet::m_queue_matrix	queue_packet.h	/^		SPKTEXT *m_queue_matrix;$/;"	m	class:queue_packet	access:private
queue_packet::m_use_count	queue_packet.h	/^		unsigned int m_use_count;\/\/目前使用中的数量$/;"	m	class:queue_packet	access:private
queue_packet::queue_alloc	queue_packet.cpp	/^SPKTEXT * queue_packet::queue_alloc(unsigned int sn)$/;"	f	class:queue_packet	signature:(unsigned int sn)
queue_packet::queue_alloc	queue_packet.h	/^		SPKTEXT * queue_alloc(unsigned int sn);$/;"	p	class:queue_packet	access:public	signature:(unsigned int sn)
queue_packet::queue_get	queue_packet.h	/^		SPKTEXT * queue_get(unsigned int sn);$/;"	p	class:queue_packet	access:public	signature:(unsigned int sn)
queue_packet::queue_packet	queue_packet.cpp	/^queue_packet::queue_packet()$/;"	f	class:queue_packet	signature:()
queue_packet::queue_packet	queue_packet.h	/^		queue_packet();$/;"	p	class:queue_packet	access:public	signature:()
queue_packet::~queue_packet	queue_packet.cpp	/^queue_packet::~queue_packet()$/;"	f	class:queue_packet	signature:()
queue_packet::~queue_packet	queue_packet.h	/^		~queue_packet();$/;"	p	class:queue_packet	access:public	signature:()
queue_query_by_addr	queue_socket.h	/^		stcp_socket_base * queue_query_by_addr();$/;"	p	class:queue_socket	access:public	signature:()
queue_query_index	queue_socket.cpp	/^stcp_socket_base * queue_socket::queue_query_index(int index)$/;"	f	class:queue_socket	signature:(int index)
queue_query_index	queue_socket.h	/^		stcp_socket_base * queue_query_index(int index);$/;"	p	class:queue_socket	access:public	signature:(int index)
queue_socket	queue_socket.cpp	/^queue_socket::queue_socket()$/;"	f	class:queue_socket	signature:()
queue_socket	queue_socket.h	/^		queue_socket();$/;"	p	class:queue_socket	access:private	signature:()
queue_socket	queue_socket.h	/^class queue_socket$/;"	c
queue_socket::m_count	queue_socket.h	/^		std::atomic<int> m_count;$/;"	m	class:queue_socket	access:private
queue_socket::m_instance	queue_socket.cpp	/^queue_socket queue_socket::m_instance;$/;"	m	class:queue_socket	file:
queue_socket::m_instance	queue_socket.h	/^		static queue_socket m_instance;$/;"	m	class:queue_socket	access:public
queue_socket::m_mutex	queue_socket.h	/^		std::mutex m_mutex;$/;"	m	class:queue_socket	access:private
queue_socket::m_psocket_queue	queue_socket.h	/^		SOCKET_QUEUE *m_psocket_queue;$/;"	m	class:queue_socket	access:private
queue_socket::queue_query_by_addr	queue_socket.h	/^		stcp_socket_base * queue_query_by_addr();$/;"	p	class:queue_socket	access:public	signature:()
queue_socket::queue_query_index	queue_socket.cpp	/^stcp_socket_base * queue_socket::queue_query_index(int index)$/;"	f	class:queue_socket	signature:(int index)
queue_socket::queue_query_index	queue_socket.h	/^		stcp_socket_base * queue_query_index(int index);$/;"	p	class:queue_socket	access:public	signature:(int index)
queue_socket::queue_socket	queue_socket.cpp	/^queue_socket::queue_socket()$/;"	f	class:queue_socket	signature:()
queue_socket::queue_socket	queue_socket.h	/^		queue_socket();$/;"	p	class:queue_socket	access:private	signature:()
queue_socket::socket_close	queue_socket.cpp	/^int queue_socket::socket_close(int index)$/;"	f	class:queue_socket	signature:(int index)
queue_socket::socket_close	queue_socket.h	/^		int socket_close(int index);$/;"	p	class:queue_socket	access:public	signature:(int index)
queue_socket::socket_count	queue_socket.cpp	/^int queue_socket::socket_count()$/;"	f	class:queue_socket	signature:()
queue_socket::socket_count	queue_socket.h	/^		int socket_count() const;$/;"	p	class:queue_socket	access:public	signature:() const
queue_socket::socket_create	queue_socket.cpp	/^int queue_socket::socket_create(int cls)$/;"	f	class:queue_socket	signature:(int cls)
queue_socket::socket_create	queue_socket.h	/^		int socket_create(int cls);$/;"	p	class:queue_socket	access:public	signature:(int cls)
queue_socket::socket_dump	queue_socket.h	/^		int socket_dump();$/;"	p	class:queue_socket	access:public	signature:()
queue_socket::~queue_socket	queue_socket.cpp	/^queue_socket::~queue_socket()$/;"	f	class:queue_socket	signature:()
queue_socket::~queue_socket	queue_socket.h	/^		~queue_socket();$/;"	p	class:queue_socket	access:private	signature:()
recv	stcp_socket_base.cpp	/^int stcp_socket_base::recv(void *buf,int size,int flag)$/;"	f	class:stcp_socket_base	signature:(void *buf,int size,int flag)
recv	stcp_socket_base.h	/^		virtual int recv(void *buf, int size, int flag);$/;"	p	class:stcp_socket_base	access:public	signature:(void *buf, int size, int flag)
recv	stcp_socket_listen.cpp	/^int stcp_socket_listen::recv(void *buf, int size, int flag)$/;"	f	class:stcp_socket_listen	signature:(void *buf, int size, int flag)
remove_socket	stcp_startup.h	/^		int remove_socket(int index);$/;"	p	class:stcp_startup	access:public	signature:(int index)
send	stcp_socket_base.cpp	/^int stcp_socket_base::send(const void * buf,int size,int flag)$/;"	f	class:stcp_socket_base	signature:(const void * buf,int size,int flag)
send	stcp_socket_base.h	/^		virtual int send(const void * buf, int size, int flag);$/;"	p	class:stcp_socket_base	access:public	signature:(const void * buf, int size, int flag)
send	stcp_socket_listen.cpp	/^int stcp_socket_listen::send(const void *buf, int size, int flag)$/;"	f	class:stcp_socket_listen	signature:(const void *buf, int size, int flag)
set_socket_class	stcp_socket_base.cpp	/^void stcp_socket_base::set_socket_class(int cls)$/;"	f	class:stcp_socket_base	signature:(int cls)
set_socket_class	stcp_socket_base.h	/^		void set_socket_class(int cls);$/;"	p	class:stcp_socket_base	access:public	signature:(int cls)
socket_close	queue_socket.cpp	/^int queue_socket::socket_close(int index)$/;"	f	class:queue_socket	signature:(int index)
socket_close	queue_socket.h	/^		int socket_close(int index);$/;"	p	class:queue_socket	access:public	signature:(int index)
socket_count	queue_socket.cpp	/^int queue_socket::socket_count()$/;"	f	class:queue_socket	signature:()
socket_count	queue_socket.h	/^		int socket_count() const;$/;"	p	class:queue_socket	access:public	signature:() const
socket_create	queue_socket.cpp	/^int queue_socket::socket_create(int cls)$/;"	f	class:queue_socket	signature:(int cls)
socket_create	queue_socket.h	/^		int socket_create(int cls);$/;"	p	class:queue_socket	access:public	signature:(int cls)
socket_dump	queue_socket.h	/^		int socket_dump();$/;"	p	class:queue_socket	access:public	signature:()
ss	queue_socket.h	/^	stcp_socket_base *ss;$/;"	m	struct:_s_queue_socket	access:public
status	queue_socket.h	/^	stcp_socket_status status;$/;"	m	struct:_s_queue_socket	access:public
stcp_accept	stcp_api.cpp	/^int stcp_accept(int socket, struct sockaddr *addr, int addrlen)$/;"	f	signature:(int socket, struct sockaddr *addr, int addrlen)
stcp_accept	stcp_api.h	/^    int stcp_accept(int socket, struct sockaddr *addr, int addrlen);$/;"	p	signature:(int socket, struct sockaddr *addr, int addrlen)
stcp_bind	stcp_api.cpp	/^int stcp_bind(int socket, struct sockaddr *addr, int addrlen)$/;"	f	signature:(int socket, struct sockaddr *addr, int addrlen)
stcp_bind	stcp_api.h	/^    int stcp_bind(int socket, struct sockaddr *addr, int addrlen);$/;"	p	signature:(int socket, struct sockaddr *addr, int addrlen)
stcp_cache	stcp_cache.cpp	/^stcp_cache::stcp_cache()$/;"	f	class:stcp_cache	signature:()
stcp_cache	stcp_cache.h	/^        stcp_cache();$/;"	p	class:stcp_cache	access:public	signature:()
stcp_cache	stcp_cache.h	/^class stcp_cache{$/;"	c
stcp_cache::alloc	stcp_cache.cpp	/^SPKTEXT * stcp_cache::alloc(int serial)$/;"	f	class:stcp_cache	signature:(int serial)
stcp_cache::alloc	stcp_cache.h	/^       SPKTEXT *alloc(int serial);$/;"	p	class:stcp_cache	access:public	signature:(int serial)
stcp_cache::cache_pool	stcp_cache.h	/^       SPKTEXT cache_pool[STCP_CACHE_MAXSIZE];$/;"	m	class:stcp_cache	access:private
stcp_cache::cache_size	stcp_cache.h	/^       int cache_size;$/;"	m	class:stcp_cache	access:private
stcp_cache::free	stcp_cache.cpp	/^int stcp_cache::free (int serial, int size)$/;"	f	class:stcp_cache	signature:(int serial, int size)
stcp_cache::free	stcp_cache.h	/^       int free(int serial, int size);$/;"	p	class:stcp_cache	access:public	signature:(int serial, int size)
stcp_cache::stcp_cache	stcp_cache.cpp	/^stcp_cache::stcp_cache()$/;"	f	class:stcp_cache	signature:()
stcp_cache::stcp_cache	stcp_cache.h	/^        stcp_cache();$/;"	p	class:stcp_cache	access:public	signature:()
stcp_cache::~stcp_cache	stcp_cache.cpp	/^stcp_cache::~stcp_cache()$/;"	f	class:stcp_cache	signature:()
stcp_cache::~stcp_cache	stcp_cache.h	/^        ~stcp_cache();$/;"	p	class:stcp_cache	access:public	signature:()
stcp_class_enum	stcp.h	/^enum stcp_class_enum$/;"	g
stcp_close	stcp_api.cpp	/^int stcp_close(int sockfd)$/;"	f	signature:(int sockfd)
stcp_close	stcp_api.h	/^    int stcp_close(int sockfd);$/;"	p	signature:(int sockfd)
stcp_connect	stcp_api.cpp	/^int stcp_connect(int sockfd, struct sockaddr *addr, int addrlen)$/;"	f	signature:(int sockfd, struct sockaddr *addr, int addrlen)
stcp_connect	stcp_api.h	/^    int stcp_connect(int sockfd, struct sockaddr *addr, int addrlen);$/;"	p	signature:(int sockfd, struct sockaddr *addr, int addrlen)
stcp_listen	stcp_api.cpp	/^int stcp_listen(int socket, int backlog)$/;"	f	signature:(int socket, int backlog)
stcp_listen	stcp_api.h	/^    int stcp_listen(int socket, int backlog);$/;"	p	signature:(int socket, int backlog)
stcp_log	stcp_api.cpp	/^void stcp_log(std::string log)$/;"	f	signature:(std::string log)
stcp_log	stcp_api.h	/^	void stcp_log(std::string log);$/;"	p	signature:(std::string log)
stcp_packet_cmd	stcp.h	/^enum stcp_packet_cmd$/;"	g
stcp_packet_header	stcp.h	/^typedef struct stcp_packet_header$/;"	s
stcp_packet_header::ucmd	stcp.h	/^    unsigned short ucmd;$/;"	m	struct:stcp_packet_header	access:public
stcp_packet_header::usid	stcp.h	/^    unsigned short usid;$/;"	m	struct:stcp_packet_header	access:public
stcp_pkt	stcp.h	/^typedef struct stcp_pkt$/;"	s
stcp_pkt::__anon1::data	stcp.h	/^        SPKTDATA data;$/;"	m	union:stcp_pkt::__anon1	access:public
stcp_pkt::body	stcp.h	/^    }body;$/;"	m	struct:stcp_pkt	typeref:union:stcp_pkt::__anon1	access:public
stcp_pkt::hdr	stcp.h	/^    SPKTHDR hdr;$/;"	m	struct:stcp_pkt	access:public
stcp_pkt_data	stcp.h	/^typedef struct stcp_pkt_data$/;"	s
stcp_pkt_data::ackfreq	stcp.h	/^    short ackfreq;$/;"	m	struct:stcp_pkt_data	access:public
stcp_pkt_data::data	stcp.h	/^    char data[STCP_PKT_DATA_SIZE];$/;"	m	struct:stcp_pkt_data	access:public
stcp_pkt_data::urtt	stcp.h	/^    unsigned long urtt;\/\/time.$/;"	m	struct:stcp_pkt_data	access:public
stcp_pkt_data::usnBase	stcp.h	/^    unsigned long usnBase;\/\/serial$/;"	m	struct:stcp_pkt_data	access:public
stcp_pkt_ext	stcp.h	/^typedef struct stcp_pkt_ext$/;"	s
stcp_pkt_ext::data_offset	stcp.h	/^    int data_offset;$/;"	m	struct:stcp_pkt_ext	access:public
stcp_pkt_ext::data_size	stcp.h	/^    int data_size;$/;"	m	struct:stcp_pkt_ext	access:public
stcp_pkt_ext::pkt	stcp.h	/^    SPKT pkt;$/;"	m	struct:stcp_pkt_ext	access:public
stcp_pkt_ext::pkt_size	stcp.h	/^    int pkt_size;$/;"	m	struct:stcp_pkt_ext	access:public
stcp_recv	stcp_api.cpp	/^int stcp_recv(int sockfd, void *buf, size_t len, int flags)$/;"	f	signature:(int sockfd, void *buf, size_t len, int flags)
stcp_recv	stcp_api.h	/^    int stcp_send(int sockfd, const void *buf, size_t len, int flags); int stcp_recv(int sockfd, void *buf, size_t len, int flags);$/;"	p	signature:(int sockfd, void *buf, size_t len, int flags)
stcp_send	stcp_api.cpp	/^int stcp_send(int sockfd, const void *buf, size_t len, int flags)$/;"	f	signature:(int sockfd, const void *buf, size_t len, int flags)
stcp_send	stcp_api.h	/^    int stcp_send(int sockfd, const void *buf, size_t len, int flags); int stcp_recv(int sockfd, void *buf, size_t len, int flags);$/;"	p	signature:(int sockfd, const void *buf, size_t len, int flags)
stcp_socket	stcp_api.cpp	/^int stcp_socket(int af, int stream, int proto, int cls)$/;"	f	signature:(int af, int stream, int proto, int cls)
stcp_socket	stcp_api.h	/^    int stcp_socket(int af, int stream, int proto);$/;"	p	signature:(int af, int stream, int proto)
stcp_socket_accept	stcp_socket_accept.h	/^		stcp_socket_accept(int cls);$/;"	p	class:stcp_socket_accept	access:public	signature:(int cls)
stcp_socket_accept	stcp_socket_accept.h	/^class stcp_socket_accept : stcp_socket_tcp$/;"	c	inherits:stcp_socket_tcp
stcp_socket_accept::stcp_socket_accept	stcp_socket_accept.h	/^		stcp_socket_accept(int cls);$/;"	p	class:stcp_socket_accept	access:public	signature:(int cls)
stcp_socket_bas::bind	stcp_socket_base.cpp	/^int stcp_socket_bas::bind(const struct sockaddr * addr,int addrlen)$/;"	f	class:stcp_socket_bas	signature:(const struct sockaddr * addr,int addrlen)
stcp_socket_base	stcp_socket_base.cpp	/^stcp_socket_base::stcp_socket_base(int sock_type,int sock_stream,int sock_proto, int cls): m_class(sock_type), m_class(cls)$/;"	f	class:stcp_socket_base	signature:(int sock_type,int sock_stream,int sock_proto, int cls)
stcp_socket_base	stcp_socket_base.h	/^        stcp_socket_base(int sock_type, int sock_stream, int sock_proto, int cls);$/;"	p	class:stcp_socket_base	access:public	signature:(int sock_type, int sock_stream, int sock_proto, int cls)
stcp_socket_base	stcp_socket_base.h	/^class stcp_socket_base$/;"	c
stcp_socket_base::accept	stcp_socket_base.cpp	/^int stcp_socket_base::accept(struct sockaddr * addr,int addrlen)$/;"	f	class:stcp_socket_base	signature:(struct sockaddr * addr,int addrlen)
stcp_socket_base::accept	stcp_socket_base.h	/^		virtual int accept(struct sockaddr * addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(struct sockaddr * addr, int addrlen)
stcp_socket_base::bind	stcp_socket_base.h	/^		virtual int bind(const struct sockaddr * addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(const struct sockaddr * addr, int addrlen)
stcp_socket_base::close_socket	stcp_socket_base.cpp	/^int stcp_socket_base::close_socket()$/;"	f	class:stcp_socket_base	signature:()
stcp_socket_base::close_socket	stcp_socket_base.h	/^		int close_socket();$/;"	p	class:stcp_socket_base	access:public	signature:()
stcp_socket_base::close_socket_force	stcp_socket_base.cpp	/^int stcp_socket_base::close_socket_force()$/;"	f	class:stcp_socket_base	signature:()
stcp_socket_base::close_socket_force	stcp_socket_base.h	/^		int close_socket_force();$/;"	p	class:stcp_socket_base	access:public	signature:()
stcp_socket_base::connect	stcp_socket_base.cpp	/^int stcp_socket_base::connect(struct sockaddr *addr,int addrlen)$/;"	f	class:stcp_socket_base	signature:(struct sockaddr *addr,int addrlen)
stcp_socket_base::connect	stcp_socket_base.h	/^		virtual int connect(struct sockaddr *addr, int addrlen);$/;"	p	class:stcp_socket_base	access:public	signature:(struct sockaddr *addr, int addrlen)
stcp_socket_base::get_socket_class	stcp_socket_base.cpp	/^int  stcp_socket_base::get_socket_class()$/;"	f	class:stcp_socket_base	signature:()
stcp_socket_base::get_socket_class	stcp_socket_base.h	/^		int  get_socket_class();$/;"	p	class:stcp_socket_base	access:public	signature:()
stcp_socket_base::listen	stcp_socket_base.cpp	/^int stcp_socket_base::listen(int backlog)$/;"	f	class:stcp_socket_base	signature:(int backlog)
stcp_socket_base::listen	stcp_socket_base.h	/^		virtual int listen(int backlog);$/;"	p	class:stcp_socket_base	access:public	signature:(int backlog)
stcp_socket_base::m_class	stcp_socket_base.h	/^		int m_class;\/\/socket 类型$/;"	m	class:stcp_socket_base	access:private
stcp_socket_base::m_index	stcp_socket_base.h	/^		int m_index;\/\/socket在pool中的index$/;"	m	class:stcp_socket_base	access:private
stcp_socket_base::m_socket	stcp_socket_base.h	/^		int m_socket;\/\/udp的socket$/;"	m	class:stcp_socket_base	access:protected
stcp_socket_base::recv	stcp_socket_base.cpp	/^int stcp_socket_base::recv(void *buf,int size,int flag)$/;"	f	class:stcp_socket_base	signature:(void *buf,int size,int flag)
stcp_socket_base::recv	stcp_socket_base.h	/^		virtual int recv(void *buf, int size, int flag);$/;"	p	class:stcp_socket_base	access:public	signature:(void *buf, int size, int flag)
stcp_socket_base::send	stcp_socket_base.cpp	/^int stcp_socket_base::send(const void * buf,int size,int flag)$/;"	f	class:stcp_socket_base	signature:(const void * buf,int size,int flag)
stcp_socket_base::send	stcp_socket_base.h	/^		virtual int send(const void * buf, int size, int flag);$/;"	p	class:stcp_socket_base	access:public	signature:(const void * buf, int size, int flag)
stcp_socket_base::set_socket_class	stcp_socket_base.cpp	/^void stcp_socket_base::set_socket_class(int cls)$/;"	f	class:stcp_socket_base	signature:(int cls)
stcp_socket_base::set_socket_class	stcp_socket_base.h	/^		void set_socket_class(int cls);$/;"	p	class:stcp_socket_base	access:public	signature:(int cls)
stcp_socket_base::stcp_socket_base	stcp_socket_base.cpp	/^stcp_socket_base::stcp_socket_base(int sock_type,int sock_stream,int sock_proto, int cls): m_class(sock_type), m_class(cls)$/;"	f	class:stcp_socket_base	signature:(int sock_type,int sock_stream,int sock_proto, int cls)
stcp_socket_base::stcp_socket_base	stcp_socket_base.h	/^        stcp_socket_base(int sock_type, int sock_stream, int sock_proto, int cls);$/;"	p	class:stcp_socket_base	access:public	signature:(int sock_type, int sock_stream, int sock_proto, int cls)
stcp_socket_base::~stcp_socket_base	stcp_socket_base.cpp	/^stcp_socket_base::~stcp_socket_base()$/;"	f	class:stcp_socket_base	signature:()
stcp_socket_base::~stcp_socket_base	stcp_socket_base.h	/^        ~stcp_socket_base();$/;"	p	class:stcp_socket_base	access:public	signature:()
stcp_socket_connect	stcp_socket_connect.h	/^		stcp_socket_connect(int cls);$/;"	p	class:stcp_socket_connect	access:public	signature:(int cls)
stcp_socket_connect	stcp_socket_connect.h	/^class stcp_socket_connect : stcp_socket_tcp$/;"	c	inherits:stcp_socket_tcp
stcp_socket_connect::stcp_socket_connect	stcp_socket_connect.h	/^		stcp_socket_connect(int cls);$/;"	p	class:stcp_socket_connect	access:public	signature:(int cls)
stcp_socket_listen	stcp_socket_listen.cpp	/^stcp_socket_listen::stcp_socket_listen(int cls): stcp_socket_base(AF_INET, SOCK_STREAM, IPPROTO_UDP, cls)$/;"	f	class:stcp_socket_listen	signature:(int cls)
stcp_socket_listen	stcp_socket_listen.h	/^		stcp_socket_listen(int cls);$/;"	p	class:stcp_socket_listen	access:public	signature:(int cls)
stcp_socket_listen	stcp_socket_listen.h	/^class stcp_socket_listen : stcp_socket_base$/;"	c	inherits:stcp_socket_base
stcp_socket_listen::accept	stcp_socket_listen.cpp	/^int stcp_socket_listen::accept(struct sockaddr * addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(struct sockaddr * addr, int addrlen)
stcp_socket_listen::bind	stcp_socket_listen.cpp	/^int stcp_socket_listen::bind(const struct sockaddr * addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(const struct sockaddr * addr, int addrlen)
stcp_socket_listen::connect	stcp_socket_listen.cpp	/^int stcp_socket_listen::connect(struct sockaddr *addr, int addrlen) $/;"	f	class:stcp_socket_listen	signature:(struct sockaddr *addr, int addrlen)
stcp_socket_listen::listen	stcp_socket_listen.cpp	/^int stcp_socket_listen::listen(int backlog)$/;"	f	class:stcp_socket_listen	signature:(int backlog)
stcp_socket_listen::m_bind_addr	stcp_socket_listen.h	/^		struct sockaddr m_bind_addr;$/;"	m	class:stcp_socket_listen	typeref:struct:stcp_socket_listen::sockaddr	access:private
stcp_socket_listen::override	stcp_socket_listen.h	/^		int bind(const struct sockaddr * addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::override	stcp_socket_listen.h	/^		int listen(int backlog) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::override	stcp_socket_listen.h	/^	    int recv(void *buf, int size, int flag) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::override	stcp_socket_listen.h	/^	    int send(const void * buf, int size, int flag) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::override	stcp_socket_listen.h	/^        int accept(struct sockaddr * addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::override	stcp_socket_listen.h	/^        int connect(struct sockaddr *addr, int addrlen) override;$/;"	m	class:stcp_socket_listen	access:public
stcp_socket_listen::recv	stcp_socket_listen.cpp	/^int stcp_socket_listen::recv(void *buf, int size, int flag)$/;"	f	class:stcp_socket_listen	signature:(void *buf, int size, int flag)
stcp_socket_listen::send	stcp_socket_listen.cpp	/^int stcp_socket_listen::send(const void *buf, int size, int flag)$/;"	f	class:stcp_socket_listen	signature:(const void *buf, int size, int flag)
stcp_socket_listen::stcp_socket_listen	stcp_socket_listen.cpp	/^stcp_socket_listen::stcp_socket_listen(int cls): stcp_socket_base(AF_INET, SOCK_STREAM, IPPROTO_UDP, cls)$/;"	f	class:stcp_socket_listen	signature:(int cls)
stcp_socket_listen::stcp_socket_listen	stcp_socket_listen.h	/^		stcp_socket_listen(int cls);$/;"	p	class:stcp_socket_listen	access:public	signature:(int cls)
stcp_socket_status	stcp.h	/^enum stcp_socket_status$/;"	g
stcp_socket_tcp	stcp_socket_tcp.h	/^class stcp_socket_tcp: stcp_socket_base$/;"	c	inherits:stcp_socket_base
stcp_startup	stcp_api.cpp	/^int stcp_startup()$/;"	f	signature:()
stcp_startup	stcp_api.h	/^    int stcp_startup();$/;"	p	signature:()
stcp_startup	stcp_startup.cpp	/^stcp_startup::stcp_startup()$/;"	f	class:stcp_startup	signature:()
stcp_startup	stcp_startup.h	/^		stcp_startup();$/;"	p	class:stcp_startup	access:public	signature:()
stcp_startup	stcp_startup.h	/^class stcp_startup{$/;"	c
stcp_startup::get_socket	stcp_startup.cpp	/^stcp_socket_base* stcp_startup::get_socket(int index)$/;"	f	class:stcp_startup	signature:(int index)
stcp_startup::get_socket	stcp_startup.h	/^		stcp_socket_base * get_socket(int index);$/;"	p	class:stcp_startup	access:public	signature:(int index)
stcp_startup::m_instance	stcp_startup.h	/^		static stcp_startup m_instance;$/;"	m	class:stcp_startup	access:public
stcp_startup::m_mutex	stcp_startup.h	/^		static std::mutex m_mutex;$/;"	m	class:stcp_startup	access:private
stcp_startup::m_socket_queue	stcp_startup.h	/^		queue_socket m_socket_queue;$/;"	m	class:stcp_startup	access:private
stcp_startup::make_socket	stcp_startup.cpp	/^int stcp_startup::make_socket(stcp_class_enum cls)$/;"	f	class:stcp_startup	signature:(stcp_class_enum cls)
stcp_startup::make_socket	stcp_startup.h	/^		int make_socket(stcp_class_enum cls);$/;"	p	class:stcp_startup	access:public	signature:(stcp_class_enum cls)
stcp_startup::remove_socket	stcp_startup.h	/^		int remove_socket(int index);$/;"	p	class:stcp_startup	access:public	signature:(int index)
stcp_startup::stcp_startup	stcp_startup.cpp	/^stcp_startup::stcp_startup()$/;"	f	class:stcp_startup	signature:()
stcp_startup::stcp_startup	stcp_startup.h	/^		stcp_startup();$/;"	p	class:stcp_startup	access:public	signature:()
stcp_startup::~stcp_startup	stcp_startup.cpp	/^stcp_startup::~stcp_startup()$/;"	f	class:stcp_startup	signature:()
stcp_startup::~stcp_startup	stcp_startup.h	/^		~stcp_startup();$/;"	p	class:stcp_startup	access:public	signature:()
thread_cache_test	main.cpp	/^void thread_cache_test(void)$/;"	f	signature:(void)
thread_listen_test	main.cpp	/^void thread_listen_test(void)$/;"	f	signature:(void)
ucmd	stcp.h	/^    unsigned short ucmd;$/;"	m	struct:stcp_packet_header	access:public
urtt	stcp.h	/^    unsigned long urtt;\/\/time.$/;"	m	struct:stcp_pkt_data	access:public
usid	stcp.h	/^    unsigned short usid;$/;"	m	struct:stcp_packet_header	access:public
usnBase	stcp.h	/^    unsigned long usnBase;\/\/serial$/;"	m	struct:stcp_pkt_data	access:public
~queue_packet	queue_packet.cpp	/^queue_packet::~queue_packet()$/;"	f	class:queue_packet	signature:()
~queue_packet	queue_packet.h	/^		~queue_packet();$/;"	p	class:queue_packet	access:public	signature:()
~queue_socket	queue_socket.cpp	/^queue_socket::~queue_socket()$/;"	f	class:queue_socket	signature:()
~queue_socket	queue_socket.h	/^		~queue_socket();$/;"	p	class:queue_socket	access:private	signature:()
~stcp_cache	stcp_cache.cpp	/^stcp_cache::~stcp_cache()$/;"	f	class:stcp_cache	signature:()
~stcp_cache	stcp_cache.h	/^        ~stcp_cache();$/;"	p	class:stcp_cache	access:public	signature:()
~stcp_socket_base	stcp_socket_base.cpp	/^stcp_socket_base::~stcp_socket_base()$/;"	f	class:stcp_socket_base	signature:()
~stcp_socket_base	stcp_socket_base.h	/^        ~stcp_socket_base();$/;"	p	class:stcp_socket_base	access:public	signature:()
~stcp_startup	stcp_startup.cpp	/^stcp_startup::~stcp_startup()$/;"	f	class:stcp_startup	signature:()
~stcp_startup	stcp_startup.h	/^		~stcp_startup();$/;"	p	class:stcp_startup	access:public	signature:()
